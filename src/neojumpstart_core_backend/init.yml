resources:
  Resources:
    # API Gateway Resources
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        Name: Cognito
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - "Fn::GetAtt": [MasterUserPoolneostella, Arn]
          - "Fn::GetAtt": [MasterUserPoolAppKeys, Arn]

    # RDS Resources
    MasterUserDB:
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName: ${self:service}${self:provider.stage}MasterUserDB
        DBClusterIdentifier: ${self:service}-${self:provider.stage}-masterusercluster
        DeletionProtection: False
        EnableHttpEndpoint: True
        Engine: aurora-postgresql
        EngineMode: serverless
        MasterUsername: postgres
        MasterUserPassword: postgres123
        Port: 5432
        ScalingConfiguration:
          MaxCapacity: 16
          MinCapacity: 8
          AutoPause: True
          SecondsUntilAutoPause: 7200

    # Secrets Manager Resources
    DatabaseKeys:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}/${self:provider.stage}/DatabaseKeys
        SecretString:
          Fn::Sub:
            - '{"dbInstanceIdentifier": "${Value1}","engine": "${Value2}","host": "${Value3}","port": "${Value4}","resourceId": "${Value5}","username": "${Value6}","password":"${Value7}"}'
            - Value1: ${self:resources.0.Resources.MasterUserDB.Properties.DBClusterIdentifier}
              Value2: ${self:resources.0.Resources.MasterUserDB.Properties.Engine}
              Value3:
                "Fn::GetAtt": [MasterUserDB, Endpoint.Address]
              Value4: ${self:resources.0.Resources.MasterUserDB.Properties.Port}
              Value5:
                Ref: MasterUserDB
              Value6: ${self:resources.0.Resources.MasterUserDB.Properties.MasterUsername}
              Value7: ${self:resources.0.Resources.MasterUserDB.Properties.MasterUserPassword}

    CoralogixKey:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}/${self:provider.stage}/CoralogixKey
        SecretString: '{
          "CoralogixKey": "ad0e94ce-b59d-8e11-e3f7-93f825222407"
          }'

    ApplicationKey:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:service}/${self:provider.stage}/ApplicationKey
        SecretString: '{
          "AppKey": "EnterApplicationKey"
          }'
    AppKeyRotationSchedule:
      Type: AWS::SecretsManager::RotationSchedule
      Properties:
        RotationLambdaARN:
          "Fn::GetAtt": [RotateSecretLambdaFunction, Arn]
        RotationRules:
          AutomaticallyAfterDays: 30
        SecretId:
          Ref: ApplicationKey

    # IAM
    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn: RotateSecretLambdaFunction
      Properties:
        FunctionName:
          "Fn::GetAtt": [RotateSecretLambdaFunction, Arn]
        Action: lambda:InvokeFunction
        Principal: "secretsmanager.amazonaws.com"

    # S3 resources
    TranslationBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-${self:provider.stage}-translationsbucket
