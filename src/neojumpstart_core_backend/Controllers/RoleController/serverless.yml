functions:
  # Roles
  RolesGet:
    handler: src/neojumpstart_core_backend/Controllers/RoleController/RolesGet.lambda_handler
    environment:
      RESOURCE_METHOD: RolesGet
    events:
      - http:
          path: roles
          cors: True
          method: get
          documentation: ${file(./src/neojumpstart_core_backend/OpenAPI_Doc/serverless.doc.yml):functions.RolesGet}
          authorizer:
            type: COGNITO_USER_POOLS
            scopes:
              - aws.cognito.signin.user.admin
              - apiauthidentifier/json.read
            authorizerId:
              Ref: ApiGatewayAuthorizer

  RolesPost:
    handler: src/neojumpstart_core_backend/Controllers/RoleController/RolesPost.lambda_handler
    environment:
      RESOURCE_METHOD: RolesPost
    events:
      - http:
          path: roles
          cors: True
          method: post
          documentation: ${file(./src/neojumpstart_core_backend/OpenAPI_Doc/serverless.doc.yml):functions.RolesPost}
          authorizer:
            type: COGNITO_USER_POOLS
            scopes:
              - aws.cognito.signin.user.admin
              - apiauthidentifier/json.read
            authorizerId:
              Ref: ApiGatewayAuthorizer

  RolesPut:
    handler: src/neojumpstart_core_backend/Controllers/RoleController/RolesPut.lambda_handler
    environment:
      RESOURCE_METHOD: RolesPut
    events:
      - http:
          path: roles
          cors: True
          method: put
          documentation: ${file(./src/neojumpstart_core_backend/OpenAPI_Doc/serverless.doc.yml):functions.RolesPut}
          authorizer:
            type: COGNITO_USER_POOLS
            scopes:
              - aws.cognito.signin.user.admin
              - apiauthidentifier/json.read
            authorizerId:
              Ref: ApiGatewayAuthorizer
